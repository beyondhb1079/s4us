name: 'Approvals'

on:
  pull_request:
    branches: [main]

jobs:
  dismiss-stale-approvals:
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    name: Dismiss on major changes
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2
      - name: Get hash of last approved commit
        uses: actions/github-script@v4
        with:
          script: |
            const owner = context.payload.repository.owner.login;
            const repo = context.payload.repository.name;
            const pull_number = context.payload.pull_request.number;

            const approvals = await github.pulls
              .listReviews({ owner, repo, pull_number })
              .then((response) =>
                response.data
                  .filter(r => r.user.type == 'User' && r.state == 'APPROVED')
                  .sort((a, b) => a.id - b.id)
              );

            if (approvals.length == 0) {
              console.log('No approvals given.');
              return;
            }
            
            const approval = approvals[0];
            const commitHash = approval.commit_id;
            console.log(`Last approved at commit ${commitHash} by ${approval.user.login}.`);
            
            // Set APPROVED_SHA environment variable
            const fs = require('fs');
            fs.appendFileSync(process.env.GITHUB_ENV, `APPROVED_SHA=${approvedSha}\n`);
      - name: Check if there are only clean merges since the last approval
        shell: bash
        run: |
          set -x -v
          git fetch --all
          HEAD_SHA=${{ github.event.pull_request.head.sha }}
          APPROVED_SHA=${{ env.APPROVED_SHA }}
          BASE_SHA=${{ github.event.pull_request.base.sha }}
          echo HEAD_SHA=$HEAD_SHA
          echo APPROVED_SHA=$APPROVED_SHA
          echo BASE_SHA=$BASE_SHA
          if [ -z "$APPROVED_SHA" ] || git merge-base --is-ancestor $BASE_SHA $APPROVED_SHA
          then
            echo "No merges happened";
          else
            echo "MERGE_HAPPENED=true" >> $GITHUB_ENV;
            ANCESTOR_SHA=$(git merge-base $BASE_SHA $HEAD_SHA)
            if git merge-tree $ANCESTOR_SHA $APPROVED_SHA $BASE_SHA | grep -q '^+<*\.our$'
            then
              echo "An unclean merge happened";
            else
              echo "No unclean merges";
              MERGE_COMMIT_MSG="Merge branch 'main' into $(git name-rev --name-only $HEAD_SHA)";
              PATH_LENGTH=$(git log --oneline --ancestry-path $APPROVED_SHA...$HEAD_SHA | wc -l);
              NUM_MERGES=$(git log --oneline --ancestry-path $APPROVED_SHA...$HEAD_SHA | grep $MERGE_COMMIT_MSG);
              
              if (( $PATH_LENGTH == $NUM_MERGES ))
              then
                echo "Only clean merges have happened.";
                echo "ONLY_CLEAN_MERGES=true" >> $GITHUB_ENV;
              else
                echo "Some non-merge commits have happened.";
              fi
            fi
          fi
      - name: Auto dismiss on major changes
        if: ${{ env.ONLY_CLEAN_MERGES != 'true' }}
        uses: actions/github-script@v4
        with:
          script: |
            const owner = context.payload.repository.owner.login;
            const repo = context.payload.repository.name;
            const pull_number = context.payload.pull_request.number;

            const approvals = await github.pulls
              .listReviews({ owner, repo, pull_number })
              .then((response) =>
                response.data
                  .filter(r => r.user.type == 'User' && r.state == 'APPROVED')
                  .sort((a, b) => a.id - b.id)
              );

            if (approvals.length == 0) {
              console.log('No approvals given.');
              return
            }

            // Get info about the last approval
            const approval = approvals[0];
            const approver = approval.user.login;
            const approvedCommit = approval.commit_id;
            const currentCommit = context.payload.pull_request.head.sha;
            console.log(`Last approved at commit ${approvedCommit} by ${approver}.`);

            // Get the diff between the current commit and the last approved one.
            //
            // Note: this doesn't show which files are added/deleted.
            // If we want to take that into consideration, we should look into:
            // git diff --name-status
            const { spawnSync } = require('child_process');
            const args = [
              'diff',
              '--ignore-all-space',
              '--numstat',
              approvedCommit,
              currentCommit
            ];
            console.log('git ' + args.join(' '));

            const child = spawnSync('git', args);
            const { error, stderr, stdout } = child;

            if (error) {
              console.log(stderr.toString());
              console.error('Unable to verify approval is OK.');
              throw error;
            }

            // Parse the diff output
            console.log(stdout.toString());
            const lines = stdout.toString().trim().split('\n', 3);
            const filesChanged = lines.map(l => {
              const [insertions, deletions, name] = l.split('\t', 3);
              return {
                deletions: Number.parseInt(deletions),
                insertions: Number.parseInt(insertions),
                name
              };
            });

            const sum = (accumulator, value) => accumulator + value;
            const insertions = filesChanged.map(f => f.insertions).reduce(sum) || 0;
            const deletions = filesChanged.map(f => f.deletions).reduce(sum) || 0;
            const total = insertions + deletions;
            const summary = filesChanged.length + ' files changed, ' +
              insertions + ' insertions(+), ' +
              deletions + ' deletions(-)';
            console.log(summary);

            // Dismiss the approval if there are too many changes.
            const insertionsLimit = 10;
            const deletionsLimit = 20;
            const totalLimit = 25;

            if (total <= totalLimit
              && insertions <= insertionsLimit
              && deletions <= deletionsLimit) {
              console.log("There doesn't seem to be enough changes to warrant dismissing approval.");
              return;
            }

            const message = `Hi @${context.actor},

            I dismissed your review because it looks like you've introduced a significant
            number of changes to this pull request since it was last approved by
            @${approver}:

            \`\`\`
            ${summary}
            \`\`\`

            If either of you believe my dismissal was a mistake, consider updating
            [approvals.yml](../blob/main/.github/workflows/approvals.yml)
            in a separate pull request.

            Thank you for your contributions!`;

            console.log(message);

            await github.pulls.dismissReview({
              owner,
              repo,
              pull_number,
              review_id: approval.id,
              message
            });
